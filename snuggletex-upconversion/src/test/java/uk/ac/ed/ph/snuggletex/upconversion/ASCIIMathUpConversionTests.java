/* $Id:MathTests.java 179 2008-08-01 13:41:24Z davemckain $
 *
 * Copyright (c) 2008-2011, The University of Edinburgh.
 * All Rights Reserved
 */
package uk.ac.ed.ph.snuggletex.upconversion;

import uk.ac.ed.ph.asciimath.parser.ASCIIMathParser;
import uk.ac.ed.ph.snuggletex.definitions.W3CConstants;
import uk.ac.ed.ph.snuggletex.testutil.TestFileHelper;
import uk.ac.ed.ph.snuggletex.testutil.TestUtilities;

import java.util.Collection;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;
import org.w3c.dom.Document;

/**
 * This does the same kind of thing as {@link MathUpConversionPMathMLTests}, but uses
 * {@link ASCIIMathParser} to up-convert raw ASCIIMath input instead.
 * 
 * @author  David McKain
 * @version $Revision:179 $
 */
@RunWith(Parameterized.class)
public class ASCIIMathUpConversionTests {
    
    public static final String TEST_RESOURCE_NAME = "asciimath-upconversion-tests.txt";
    
    @Parameters
    public static Collection<String[]> data() throws Exception {
        return TestFileHelper.readAndParseSingleLineInputTestResource(TEST_RESOURCE_NAME);
    }
    
    private final String asciiMathInput;
    private final String expectedMathML;
    
    public ASCIIMathUpConversionTests(final String asciiMathInput, final String expectedMathMLContent) {
        this.asciiMathInput = asciiMathInput;
        this.expectedMathML = "<math xmlns='" + W3CConstants.MATHML_NAMESPACE + "'>"
            + expectedMathMLContent.replaceAll("(?m)^\\s+", "").replaceAll("(?m)\\s+$", "").replace("\n", "")
            + "</math>";
    }
    
    @Test
    public void runTest() throws Throwable {
        /* Do initial ASCIIMath parse */
        ASCIIMathParser parser = new ASCIIMathParser();
        Document mathDocument = parser.parseASCIIMath(asciiMathInput);
        
        /* Set up up-converter so that it only generates fixed up Presentation MathML */
        UpConversionOptions upConversionOptions = new UpConversionOptions();
        upConversionOptions.setSpecifiedOption(UpConversionOptionDefinitions.DO_CONTENT_MATHML_NAME, "false");
        upConversionOptions.setSpecifiedOption(UpConversionOptionDefinitions.DO_MAXIMA_NAME, "false");
        
        /* Now up-convert the raw MathML generated by ASCIIMath */
        MathMLUpConverter upConverter = new MathMLUpConverter();
        Document upConvertedDocument = upConverter.upConvertASCIIMathML(mathDocument, upConversionOptions);
        
        /* Verify the document */
        TestUtilities.verifyXML(expectedMathML, upConvertedDocument);
    }
}
